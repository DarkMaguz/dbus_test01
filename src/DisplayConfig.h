
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__DisplayConfig_h__PROXY_MARSHAL_H
#define __dbusxx__DisplayConfig_h__PROXY_MARSHAL_H

#include <dbus-c++-1/dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace freedesktop {
namespace DBus {

class Peer_proxy
: public ::DBus::InterfaceProxy
{
public:

    Peer_proxy()
    : ::DBus::InterfaceProxy("org.freedesktop.DBus.Peer")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Ping()
    {
        ::DBus::CallMessage call;
        call.member("Ping");
        ::DBus::Message ret = invoke_method (call);
    }

    std::string GetMachineId()
    {
        ::DBus::CallMessage call;
        call.member("GetMachineId");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } 
namespace org {
namespace gnome {
namespace Mutter {

class DisplayConfig_proxy
: public ::DBus::InterfaceProxy
{
public:

    DisplayConfig_proxy()
    : ::DBus::InterfaceProxy("org.gnome.Mutter.DisplayConfig")
    {
        connect_signal(DisplayConfig_proxy, MonitorsChanged, _MonitorsChanged_stub);
    }

public:

    /* properties exported by this interface */
        const int32_t PowerSaveMode() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "org.gnome.Mutter.DisplayConfig";
            const std::string property_name  = "PowerSaveMode";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        void PowerSaveMode( const int32_t & input) {
            ::DBus::CallMessage call ;
             call.member("Set");  call.interface( "org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            ::DBus::Variant value;
            ::DBus::MessageIter vi = value.writer ();
            vi << input;
            const std::string interface_name = "org.gnome.Mutter.DisplayConfig";
            const std::string property_name  = "PowerSaveMode";
            wi << interface_name;
            wi << property_name;
            wi << value;
            ::DBus::Message ret = this->invoke_method (call);
        };
        const bool PanelOrientationManaged() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "org.gnome.Mutter.DisplayConfig";
            const std::string property_name  = "PanelOrientationManaged";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const bool ApplyMonitorsConfigAllowed() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "org.gnome.Mutter.DisplayConfig";
            const std::string property_name  = "ApplyMonitorsConfigAllowed";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
        const bool NightLightSupported() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "org.gnome.Mutter.DisplayConfig";
            const std::string property_name  = "NightLightSupported";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void GetResources(uint32_t& serial, std::vector< ::DBus::Struct< uint32_t, int64_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, std::vector< uint32_t >, std::map< std::string, ::DBus::Variant > > >& crtcs, std::vector< ::DBus::Struct< uint32_t, int64_t, int32_t, std::vector< uint32_t >, std::string, std::vector< uint32_t >, std::vector< uint32_t >, std::map< std::string, ::DBus::Variant > > >& outputs, std::vector< ::DBus::Struct< uint32_t, int64_t, uint32_t, uint32_t, double, uint32_t > >& modes, int32_t& max_screen_width, int32_t& max_screen_height)
    {
        ::DBus::CallMessage call;
        call.member("GetResources");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> serial;
        ri >> crtcs;
        ri >> outputs;
        ri >> modes;
        ri >> max_screen_width;
        ri >> max_screen_height;
    }

    void ApplyConfiguration(const uint32_t& serial, const bool& persistent, const std::vector< ::DBus::Struct< uint32_t, int32_t, int32_t, int32_t, uint32_t, std::vector< uint32_t >, std::map< std::string, ::DBus::Variant > > >& crtcs, const std::vector< ::DBus::Struct< uint32_t, std::map< std::string, ::DBus::Variant > > >& outputs)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << serial;
        wi << persistent;
        wi << crtcs;
        wi << outputs;
        call.member("ApplyConfiguration");
        ::DBus::Message ret = invoke_method (call);
    }

    int32_t ChangeBacklight(const uint32_t& serial, const uint32_t& output, const int32_t& value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << serial;
        wi << output;
        wi << value;
        call.member("ChangeBacklight");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetCrtcGamma(const uint32_t& serial, const uint32_t& crtc, std::vector< uint16_t >& red, std::vector< uint16_t >& green, std::vector< uint16_t >& blue)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << serial;
        wi << crtc;
        call.member("GetCrtcGamma");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> red;
        ri >> green;
        ri >> blue;
    }

    void SetCrtcGamma(const uint32_t& serial, const uint32_t& crtc, const std::vector< uint16_t >& red, const std::vector< uint16_t >& green, const std::vector< uint16_t >& blue)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << serial;
        wi << crtc;
        wi << red;
        wi << green;
        wi << blue;
        call.member("SetCrtcGamma");
        ::DBus::Message ret = invoke_method (call);
    }

    void GetCurrentState(uint32_t& serial, std::vector< ::DBus::Struct< ::DBus::Struct< std::string, std::string, std::string, std::string >, std::vector< ::DBus::Struct< std::string, int32_t, int32_t, double, double, std::vector< double >, std::map< std::string, ::DBus::Variant > > >, std::map< std::string, ::DBus::Variant > > >& monitors, std::vector< ::DBus::Struct< int32_t, int32_t, double, uint32_t, bool, std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string > >, std::map< std::string, ::DBus::Variant > > >& logical_monitors, std::map< std::string, ::DBus::Variant >& properties)
    {
        ::DBus::CallMessage call;
        call.member("GetCurrentState");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> serial;
        ri >> monitors;
        ri >> logical_monitors;
        ri >> properties;
    }

    void ApplyMonitorsConfig(const uint32_t& serial, const uint32_t& method, const std::vector< ::DBus::Struct< int32_t, int32_t, double, uint32_t, bool, std::vector< ::DBus::Struct< std::string, std::string, std::map< std::string, ::DBus::Variant > > > > >& logical_monitors, const std::map< std::string, ::DBus::Variant >& properties)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << serial;
        wi << method;
        wi << logical_monitors;
        wi << properties;
        call.member("ApplyMonitorsConfig");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetOutputCTM(const uint32_t& serial, const uint32_t& output, const ::DBus::Struct< uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t >& ctm)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << serial;
        wi << output;
        wi << ctm;
        call.member("SetOutputCTM");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void MonitorsChanged() = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _MonitorsChanged_stub(const ::DBus::SignalMessage &sig)
    {
        MonitorsChanged();
    }
};

} } } 
#endif //__dbusxx__DisplayConfig_h__PROXY_MARSHAL_H
